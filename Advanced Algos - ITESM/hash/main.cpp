// hash string algorithm
// given a string, read a file named as the string
// then receive a number n, multiple of 4 and such that 16 <= n <= 64
// the output is an string of length n/4 that is an hexadecimal representation of the hash of the file following the following algorithm:
// the integer n determines the number of columns that will contain a table where the characters of the text file will be accommodated (including line breaks) in the lines that are necessary
// If the number of characters in the input file is not a multiple of n, the last line is "filled" with the value of n
// In an array a of length n it is calculated a[i] = (the sum of the ASCII of each char in the column) % 256

// the output is generated by concatenating the hexadecimal representation (uppercase) to two digits of each position in the array. The length of the output string will be n/4.
// compile with: g++ main.cpp -o main
// run with: ./main <string> <n>
// example: ./main test.txt 16

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <iterator>
#include <cmath>

using namespace std;

int main(int argc, char* argv[]) {

    string fileName = argv[1];
    int n = atoi(argv[2]);
    ifstream file(fileName);
    string fileContent((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());
    int fileContentLength = fileContent.length();
    int numberOfLines = fileContentLength/n + (fileContentLength%n != 0);
    int lastLineLength = fileContentLength%n != 0 ? fileContentLength%n : n;
    int numberOfColumns = n/8;
    int arrayLength = n/8;
    int array[arrayLength];
    string output = "";

    for(int i = 0; i < arrayLength; i++){
        array[i] = 0;
    }

    for(int i = 0; i < numberOfLines; i++){
        for(int j = 0; j < numberOfColumns; j++){
            int index = i*numberOfColumns + j;
            if(index < fileContentLength){
                array[j] += fileContent[index];
            }else{
                array[j] += n;
            }
        }
    }

    for(int i = 0; i < arrayLength; i++){
        array[i] = array[i] % 256;
        stringstream stream;
        stream << hex << array[i];
        string result( stream.str() );
        transform(result.begin(), result.end(), result.begin(), ::toupper);
        if(result.length() == 1){
            result = "0" + result;
        }
        output += result;
    }

    cout << output << endl;

    return 0;
}
